"""問題97"""
import numpy as np
import skfda

X, y = skfda.datasets.fetch_weather(return_X_y=True, as_frame=True)
df = X.iloc[:, 0].values


def g(j, x):                 # 基底を p 個用意する
    if j == 0:
        return 1 / np.sqrt(2 * np.pi)
    if j % 1 == 0:
        return np.cos((j // 2) * x) / np.sqrt(np.pi)
    else:
        return np.sin((j // 2) * x) / np.sqrt(np.pi)

def eta(x):
    return np.array([g(i, x) for i in range(p)])

def beta(x, y):              # 関数の p 個の基底の係数を計算
    X = np.zeros((N, p))
    for i in range(N):
        for j in range(p):
            X[i, j] = g(j, x[i])
    beta = np.dot(np.dot(np.linalg.inv(np.dot(X.T, X)
                                       + 0.0001 * np.identity(p)), X.T), y)
    return np.squeeze(beta)

def calc_K_N(x_array, C, d):
    """(6.40)の計算"""
    K_N = np.zeros((p, p))
    for i in range(p):
        x = x_array[i]
        eta_x = eta(x)
        for j in range(p):
            y = x_array[j]
            eta_y = eta(y)
            K_N[i, j] = 1 / N * eta_x.T @ (C - d).T @ (C - d) @ eta_y
    return K_N

N = 365
n = 35
p = 100
df = df.coordinates[0].data_matrix
C = np.zeros((n, p))
x = np.arange(1, N+1) * (2 * np.pi / N) - np.pi
for i in range(n):
    y = df[i]
    C[i, :] = beta(x, y)

d = C / N
K_N = calc_K_N(x, C, d)

print(f"{C.shape=}")
print("C=\n", C)

print(f"{d.shape=}")
print("d=\n", d)

print(f"{K_N.shape=}")
print("K_N=\n", K_N)

"""
C.shape=(35, 100)
C=
 [[ 3.91857883e+00  5.54170733e+00  7.51345140e+00 ... -2.50833038e-02
   9.09069951e-03  9.09069949e-03]
 [ 5.13847056e+00  7.26689475e+00  9.78004069e+00 ...  4.22972179e-02
  -6.87705525e-02 -6.87705525e-02]
 [ 4.60349458e+00  6.51032447e+00  8.94517048e+00 ...  4.16597541e-02
  -4.58403972e-02 -4.58403972e-02]
 ...
 [-8.06515770e+00 -1.14058554e+01  1.37821772e+01 ...  2.89353305e-02
  -9.08034699e-02 -9.08034700e-02]
 [-7.72041067e+00 -1.09183094e+01  1.86918496e+01 ...  5.59748757e-02
   6.36540111e-02  6.36540110e-02]
 [-1.38017850e+01 -1.95186715e+01  1.52525593e+01 ... -3.26473727e-02
  -1.47387978e-02 -1.47387978e-02]]
d.shape=(35, 100)
d=
 [[ 1.07358324e-02  1.51827598e-02  2.05847983e-02 ... -6.87213802e-05
   2.49060261e-05  2.49060260e-05]
 [ 1.40780015e-02  1.99093007e-02  2.67946320e-02 ...  1.15882789e-04
  -1.88412473e-04 -1.88412473e-04]
 [ 1.26123139e-02  1.78365054e-02  2.45073164e-02 ...  1.14136312e-04
  -1.25590129e-04 -1.25590129e-04]
 ...
 [-2.20963225e-02 -3.12489189e-02  3.77593896e-02 ...  7.92748781e-05
  -2.48776630e-04 -2.48776630e-04]
 [-2.11518100e-02 -2.99131766e-02  5.12105468e-02 ...  1.53355824e-04
   1.74394551e-04  1.74394551e-04]
 [-3.78131095e-02 -5.34758122e-02  4.17878337e-02 ... -8.94448566e-05
  -4.03802679e-05 -4.03802680e-05]]
K_N.shape=(100, 100)
K_N=
 [[23.25480918 23.38947594 23.55997927 ... -0.35058581 -0.63956022
  -0.96739058]
 [23.38947594 23.52866019 23.70421461 ... -0.3476852  -0.63948188
  -0.97051358]
 [23.55997927 23.70421461 23.8856201  ... -0.32817788 -0.62354911
  -0.9586173 ]
 ...
 [-0.35058581 -0.3476852  -0.32817788 ...  4.93659181  4.93224433
   4.94028509]
 [-0.63956022 -0.63948188 -0.62354911 ...  4.93224433  4.93313199
   4.94683031]
 [-0.96739058 -0.97051358 -0.9586173  ...  4.94028509  4.94683031
   4.96720162]]
"""
